[
["index.html", "Why I wrote my Thesis in R Markdown (and why you should too) Introduction", " Why I wrote my Thesis in R Markdown (and why you should too) Michael Briehl 2019-07-14 Introduction The start of writing a thesis is maybe the hardest part of the process. You are confronted with a difficult topic that you need to grasp, while simultaniously deciding which text editor you should use. With this little post, I hope to encourage you to try something different. Instead of using Word, which you shoud not, or \\(\\LaTeX\\), which has a steep learning curve, I propose you use R Markdown for your thesis. R Markdown allows you to combine text and code in one file which makes a lot of things much easier. On top of that, the document that you will create is almost guaranteed to look professional and clean. To give you only one of the many advantages that R Markdwon has over its competitors: It is very easy to be consistent and you do not need to worry about updating statistical output in the text. You can just write R code in your text and if the data set is changed, the number in our final document is automatically updated through the R code. R Markdown is Marrdown language and therefore you can do things like italic, bold, or a different font with extreme ease. Furthermore your mathematical notation can be done without using an editor and looks pretty good: \\(a^2+b^2 = c^2\\). Now I am in now way, shape or form an expert on any of this and there are probably 42 better and more efficient ways of doing things. But this worked for me and if it makes your life marginally easier then I am more than glad. I have structured this little tutorial such that you can just pick a topic that you may be struggling with and see what I did. "],
["GetStarted.html", "Get Started", " Get Started Before you can produce your first R Markdown file, you want to install the R Markdown package: install.packages(&quot;rmarkdown&quot;) Now you can go on File -&gt; New File -&gt; R Markdown to create your first file. Every file starts with a example text, which you can already render into a .html document. But your thesis is probably required to be in the .pdf format, therefore you need to install a \\(\\LaTeX\\) distribution. If you are on a Windows machine, I would recommend you MiKTex, for Mac or Linux you can use TeX Live or MacTex. Keep in mind, you do not have to be familiar with \\(\\LaTeX\\), it is just needed for the conversion into .pdf. For rendering your file you just have to press the Knit button and voilà, there is your first document. "],
["Workflow.html", "Workflow Feather RDS Experiments", " Workflow There are different approaches of working with R Markdown. Before you start writing your thesis, it is important that you decide on how much code you want to include in the .Rmd file. You can code everything in the R Markdown file, but I found that this may not be the best idea. As much as I like to keep things in one place, I would recommend you to do the ‘ugly’ part of coding in a normal R file, and just include light code in the R Markdown file. The reasoning is twofold. First, there is not much to be gained if you do the data preparation in Markdown, if you are not explicitly using it in your text. It will just extend the rendering time in the end. Secondly, I think the file gets really confusing, the bigger it gets. I did my data wrangling in a diffent file and saved the final data frame as a ‘feather’-file which is really fast. Feather Installing the feather package can save you loads of time when dealing with big data sets. Instead of always reading in your data with read.csv or read.xls you just use read feather, which is so much faster. After the first time your data is in the global environment you should use: library(feather) write_feather(your_data, &quot;your_data.feather&quot;) Now your data is saved as a feather file and can be quickly read in your next R session with: your_data &lt;- read_feather(&quot;your_data.feather&quot;) Feather is really great for dealing with big data frames, but cannot save R objects. RDS RDS is a way of caching R objects or data frames. Although you should use feather when dealing with data frames, because it is quicker, you need RDS for saving R objects. I ran pretty big random forest models for my thesis and instead of doing that every time, I saved the output: saveRDS(big_object, &quot;big_object.rds&quot;) As with feather you can just read the output again with: big_object &lt;- readRDS(&quot;big_object.rds&quot;) Because I did the heavy coding in different files, I only read in the output with either feather or RDS in my R Markdown file. Note that this only works if all your data is in the same working directory as your ‘heavy’-lifting files. You should just point the working directory of all files into one folder. Experiments As your R Markdown file gets bigger, the rendering time also extends. For your last format changes, it is probably helpfull if you generate a different file with which you can experiment. Especially for things like your cover or the ‘Einverständniserklärung’ you do not want to render the whole document. For all my direct \\(LaTeX\\) stuff and tables I experimented in a different file. "],
["CodeChunks.html", "Code Chunks", " Code Chunks Implementing R Code in the Text is especially neat to be consistent. Maybe your data set changes and you want to implement the new summary in your file? With Word or \\(\\LaTeX\\) you would have to search for the numbers that changed manually, which is really prone to mistakes. In R Markdown there is non of that. You just insert your R code directly in your text like that: ´r format(round(random.forest$MSE[500]))´. If your model changes, the number automatically changes If you want to present a code block that you used, or you have need to generally generate more code you can insert a code block 40+2 ## [1] 42 "],
["Figures.html", "Figures", " Figures Figures are also a highlight of R Markdown. Plots are a fantastic way of communicating data and I would definetly encourage you to learn the basics of ggplot, if you have not already. You can now just implement a ggplot in the code chunk. For example you could make a Boxplot like this: "],
["Tables.html", "Tables", " Tables Tables are used to present a large amount of data in a small form factor. Especially for summary statistics and variable descriptions they are a must. There are different ways of making tables and I want to present you two. The first involves the R package kable and kableextra. With kable, you can create beautiful tables for summary statistics. It has some similarity to ggplot, because you do not just type in the variables and values, instead you build a dataframe directly from your data. For example… "],
["TheYAMLheader.html", "The YAML header Margin Fontsize Other", " The YAML header The YAML header is the brain of your thesis. Parallel to , you can just change one number in this header and your whole document changes. Margin Fontsize Other "],
["References.html", "References", " References "]
]
